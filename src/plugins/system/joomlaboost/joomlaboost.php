<?php

/**
 * JoomlaBoost Test Plugin - Step by Step Development
 */

\defined('_JEXEC') or die;

use Joomla\CMS\Plugin\CMSPlugin;
use Joomla\CMS\Factory;

/**
 * JoomlaBoost plugin - incremental development
 */
class PlgSystemJoomlaboost extends CMSPlugin
{
  /**
   * Load the language file on instantiation
   */
    protected $autoloadLanguage = true;

  /**
   * Safe application access
   */
    private function getApp()
    {
        try {
            return Factory::getApplication();
        } catch (Exception $e) {
            return null;
        }
    }

  /**
   * Handle robots.txt requests BEFORE routing
   */
    public function onAfterInitialise(): void
    {
        $app = $this->getApp();
        if (!$app) {
            return; // Exit safely if app not available
        }

      // Only handle on frontend
        if (!$app->isClient('site')) {
            if ($app->isClient('administrator')) {
                $this->logDebug('JoomlaBoost: Backend initialized');
            }
            return;
        }

      // Check for robots.txt request first
        if ($this->isRobotsRequest()) {
            $this->handleRobotsRequest($app);
            return;
        }

      // Check for sitemap.xml request
        if ($this->isSitemapRequest()) {
            $this->handleSitemapRequest($app);
            return;
        }

      // Regular frontend initialization
        $this->logDebug('JoomlaBoost: Frontend initialized');
    }

  /**
   * Check if this is a sitemap.xml request
   */
    private function isSitemapRequest(): bool
    {
      // Check REQUEST_URI directly
        $requestUri = $_SERVER['REQUEST_URI'] ?? '';

      // Remove query string for clean comparison
        $cleanUri = strtok($requestUri, '?');

      // Check for sitemap.xml
        if (preg_match('#/sitemap\.xml$#i', $cleanUri)) {
            return true;
        }

      // Also check for query parameter approach
        if (isset($_GET['format']) && $_GET['format'] === 'sitemap') {
            return true;
        }

        return false;
    }

  /**
   * Handle sitemap.xml request
   */
    private function handleSitemapRequest($app): void
    {
      // Set proper headers
        header('Content-Type: application/xml; charset=utf-8');
        header('Cache-Control: public, max-age=3600');

      // Generate sitemap content
        $sitemapContent = $this->generateSitemapContent();

      // Output and exit
        echo $sitemapContent;
        $app->close();
    }

  /**
   * Generate sitemap.xml content
   */
    private function generateSitemapContent(): string
    {
        $domain = $this->getCurrentDomain();
        $isStaging = $this->isStaging($domain);

        if ($isStaging) {
            return $this->getStagingSitemap();
        } else {
            return $this->getProductionSitemap();
        }
    }

  /**
   * Get staging sitemap (minimal)
   */
    private function getStagingSitemap(): string
    {
        $domain = $this->getCurrentDomain();
        $lastmod = date('Y-m-d\TH:i:s\Z');

        return '<?xml version="1.0" encoding="UTF-8"?>' . "\n" .
        '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' . "\n" .
        '  <!-- JoomlaBoost Sitemap - STAGING ENVIRONMENT -->' . "\n" .
        '  <!-- Limited sitemap for staging -->' . "\n" .
        '  <url>' . "\n" .
        '    <loc>' . htmlspecialchars($domain) . '</loc>' . "\n" .
        '    <lastmod>' . $lastmod . '</lastmod>' . "\n" .
        '    <changefreq>daily</changefreq>' . "\n" .
        '    <priority>1.0</priority>' . "\n" .
        '  </url>' . "\n" .
        '  <!-- Generated by JoomlaBoost Plugin -->' . "\n" .
        '  <!-- Environment: Staging -->' . "\n" .
        '  <!-- Generated: ' . date('Y-m-d H:i:s T') . ' -->' . "\n" .
        '</urlset>';
    }

  /**
   * Get production sitemap (comprehensive)
   */
    private function getProductionSitemap(): string
    {
        $domain = $this->getCurrentDomain();
        $lastmod = date('Y-m-d\TH:i:s\Z');

      // Basic sitemap for now - we'll enhance this later with Joomla menu items
        return '<?xml version="1.0" encoding="UTF-8"?>' . "\n" .
        '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' . "\n" .
        '  <!-- JoomlaBoost Sitemap - PRODUCTION ENVIRONMENT -->' . "\n" .
        '  <url>' . "\n" .
        '    <loc>' . htmlspecialchars($domain) . '</loc>' . "\n" .
        '    <lastmod>' . $lastmod . '</lastmod>' . "\n" .
        '    <changefreq>daily</changefreq>' . "\n" .
        '    <priority>1.0</priority>' . "\n" .
        '  </url>' . "\n" .
        '  <!-- TODO: Add menu items and articles dynamically -->' . "\n" .
        '  <!-- Generated by JoomlaBoost Plugin -->' . "\n" .
        '  <!-- Environment: Production -->' . "\n" .
        '  <!-- Generated: ' . date('Y-m-d H:i:s T') . ' -->' . "\n" .
        '</urlset>';
    }

  /**
   * Check if this is a robots.txt request
   */
    private function isRobotsRequest(): bool
    {
      // Check REQUEST_URI directly (before Joomla processes it)
        $requestUri = $_SERVER['REQUEST_URI'] ?? '';

      // Remove query string for clean comparison
        $cleanUri = strtok($requestUri, '?');

      // Check for robots.txt
        if (preg_match('#/robots\.txt$#i', $cleanUri)) {
            return true;
        }

      // Also check for query parameter approach
        if (isset($_GET['format']) && $_GET['format'] === 'robots') {
            return true;
        }

        return false;
    }

  /**
   * Handle robots.txt request
   */
    private function handleRobotsRequest($app): void
    {
      // Set proper headers
        header('Content-Type: text/plain');
        header('Cache-Control: public, max-age=3600');

      // Generate robots.txt content
        $robotsContent = $this->generateRobotsContent();

      // Output and exit
        echo $robotsContent;
        $app->close();
    }

  /**
   * Generate robots.txt content based on environment
   */
    private function generateRobotsContent(): string
    {
      // Detect environment using $_SERVER
        $domain = $this->getCurrentDomain();
        $isStaging = $this->isStaging($domain);

        if ($isStaging) {
            return $this->getStagingRobots();
        } else {
            return $this->getProductionRobots();
        }
    }

  /**
   * Get current domain safely
   */
    private function getCurrentDomain(): string
    {
      // Method 1: Use $_SERVER (most reliable and always works)
        $scheme = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https' : 'http';
        $host = $_SERVER['HTTP_HOST'] ?? $_SERVER['SERVER_NAME'] ?? 'localhost';

        return $scheme . '://' . $host . '/';
    }

  /**
   * Check if this is staging environment
   */
    private function isStaging(string $domain): bool
    {
        $stagingKeywords = ['staging', 'stage', 'dev', 'test', 'localhost'];

        foreach ($stagingKeywords as $keyword) {
            if (stripos($domain, $keyword) !== false) {
                return true;
            }
        }

        return false;
    }

  /**
   * Get staging robots.txt (block everything)
   */
    private function getStagingRobots(): string
    {
        return "# JoomlaBoost Robots.txt - STAGING ENVIRONMENT\n" .
        "# This site is not indexed by search engines\n\n" .
        "User-agent: *\n" .
        "Disallow: /\n\n" .
        "# Generated by JoomlaBoost Plugin\n" .
        "# Environment: Staging\n" .
        "# Generated: " . date('Y-m-d H:i:s T') . "\n";
    }

  /**
   * Get production robots.txt
   */
    private function getProductionRobots(): string
    {
        $baseUrl = $this->getCurrentDomain();

        return "# JoomlaBoost Robots.txt - PRODUCTION ENVIRONMENT\n\n" .
        "User-agent: *\n" .
        "Allow: /\n\n" .
        "# Disallow admin areas\n" .
        "Disallow: /administrator/\n" .
        "Disallow: /cache/\n" .
        "Disallow: /includes/\n" .
        "Disallow: /language/\n" .
        "Disallow: /libraries/\n" .
        "Disallow: /logs/\n" .
        "Disallow: /tmp/\n\n" .
        "# Allow specific files\n" .
        "Allow: /templates/\n" .
        "Allow: /media/\n" .
        "Allow: /images/\n\n" .
        "# Sitemap\n" .
        "Sitemap: {$baseUrl}sitemap.xml\n\n" .
        "# Generated by JoomlaBoost Plugin\n" .
        "# Environment: Production\n" .
        "# Generated: " . date('Y-m-d H:i:s T') . "\n";
    }

  /**
   * Get default robots.txt (fallback)
   */
    private function getDefaultRobots(): string
    {
        return "# JoomlaBoost Robots.txt - DEFAULT\n\n" .
        "User-agent: *\n" .
        "Disallow: /administrator/\n\n" .
        "# Generated by JoomlaBoost Plugin\n" .
        "# Generated: " . date('Y-m-d H:i:s T') . "\n";
    }

  /**
   * Safe debug logging
   */
    private function logDebug(string $message): void
    {
        try {
          // Only log if debug mode is enabled in plugin config
            if ($this->params && $this->params->get('debug_mode', 0)) {
                Factory::getApplication()->enqueueMessage(
                    "[DEBUG] " . $message,
                    'info'
                );
            }
        } catch (Exception $e) {
          // Silently fail - don't break the site
        }
    }
}
