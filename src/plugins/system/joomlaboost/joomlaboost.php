<?php

/**
 * JoomlaBoost Test Plugin - Step by Step Development
 * @version     1.0.0
 */

\defined('_JEXEC') or die;

use Joomla\CMS\Plugin\CMSPlugin;
use Joomla\CMS\Factory;
use Joomla\CMS\Document\HtmlDocument;
use Joomla\CMS\Application\CMSApplication;

// Load services used by this plugin
require_once __DIR__ . '/src/Services/ServiceInterface.php';
require_once __DIR__ . '/src/Services/AbstractService.php';
require_once __DIR__ . '/src/Services/SchemaService.php';
require_once __DIR__ . '/src/Services/MetaPixelService.php';

use JoomlaBoost\Plugin\System\JoomlaBoost\Services\SchemaService;
use JoomlaBoost\Plugin\System\JoomlaBoost\Services\MetaPixelService;

/**
 * JoomlaBoost plugin - incremental development
 */
class PlgSystemJoomlaboost extends CMSPlugin
{
  /**
   * Load the language file on instantiation
   * @var bool
   */
  protected bool $autoloadLanguage = true;

  /** @var SchemaService|null */
  private ?SchemaService $schemaService = null;

  /** @var MetaPixelService|null */
  private ?MetaPixelService $metaPixelService = null;

  /**
   * Safe application access
   */
  private function getApp(): ?CMSApplication
  {
    try {
      return Factory::getApplication();
    } catch (\Throwable $e) {
      return null;
    }
  }

  /**
   * Early request hook (check robots/sitemap)
   */
  public function onAfterInitialise(): void
  {
    $app = $this->getApp();
    if (!$app) {
      return;
    }

    if (!$app->isClient('site')) {
      // Optional: debug in backend
      if ($app->isClient('administrator')) {
        $this->logDebug('JoomlaBoost initialised (admin)');
      }
      return;
    }

    // robots.txt handling
    if ($this->isRobotsRequest()) {
      $this->handleRobotsRequest($app);
      return;
    }

    // sitemap.xml handling
    if ($this->isSitemapRequest()) {
      $this->handleSitemapRequest($app);
      return;
    }
  }

  /**
   * Modify head (schema, verification, analytics)
   */
  public function onBeforeCompileHead(): void
  {
    $app = $this->getApp();
    if (!$app || !$app->isClient('site')) {
      return;
    }

    $document = $app->getDocument();
    if (!$document instanceof HtmlDocument) {
      return;
    }

    // Verification tags and trackers
    $this->addGoogleVerificationTags($document);
    $this->addMetaPixel($document);
    $this->addSchemaMarkup($document);
  }

  private function isSitemapRequest(): bool
  {
    $requestUri = (string) ($_SERVER['REQUEST_URI'] ?? '');
    $cleanUri   = strtok($requestUri, '?') ?: '';

    if (preg_match('#/sitemap\.xml$#i', $cleanUri)) {
      return true;
    }

    return isset($_GET['format']) && (string) $_GET['format'] === 'sitemap';
  }

  private function handleSitemapRequest(CMSApplication $app): void
  {
    header('Content-Type: application/xml; charset=utf-8');
    header('Cache-Control: public, max-age=3600');

    echo $this->generateSitemapContent();
    $app->close();
  }

  private function generateSitemapContent(): string
  {
    $domain    = $this->getCurrentDomain();
    $isStaging = $this->isStaging($domain);
    return $isStaging ? $this->getStagingSitemap() : $this->getProductionSitemap();
  }

  private function getStagingSitemap(): string
  {
    $domain  = $this->getCurrentDomain();
    $lastmod = date('Y-m-d\TH:i:s\Z');

    return '<?xml version="1.0" encoding="UTF-8"?>' . "\n"
      . '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' . "\n"
      . "<!-- JoomlaBoost Sitemap - STAGING ENVIRONMENT -->\n"
      . "<!-- Limited sitemap for staging -->\n"
      . "  <url>\n"
      . '    <loc>' . htmlspecialchars($domain) . "</loc>\n"
      . '    <lastmod>' . $lastmod . "</lastmod>\n"
      . "    <changefreq>daily</changefreq>\n"
      . "    <priority>1.0</priority>\n"
      . "  </url>\n"
      . "<!-- Generated by JoomlaBoost Plugin -->\n"
      . "<!-- Environment: Staging -->\n"
      . "<!-- Generated: " . date('Y-m-d H:i:s T') . " -->\n"
      . "</urlset>";
  }

  private function getProductionSitemap(): string
  {
    $domain  = $this->getCurrentDomain();
    $lastmod = date('Y-m-d\TH:i:s\Z');

    return '<?xml version="1.0" encoding="UTF-8"?>' . "\n"
      . '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' . "\n"
      . "<!-- JoomlaBoost Sitemap - PRODUCTION ENVIRONMENT -->\n"
      . "  <url>\n"
      . '    <loc>' . htmlspecialchars($domain) . "</loc>\n"
      . '    <lastmod>' . $lastmod . "</lastmod>\n"
      . "    <changefreq>daily</changefreq>\n"
      . "    <priority>1.0</priority>\n"
      . "  </url>\n"
      . "<!-- TODO: Add menu items and articles dynamically -->\n"
      . "<!-- Generated by JoomlaBoost Plugin -->\n"
      . "<!-- Environment: Production -->\n"
      . "<!-- Generated: " . date('Y-m-d H:i:s T') . " -->\n"
      . "</urlset>";
  }

  private function isRobotsRequest(): bool
  {
    $requestUri = (string) ($_SERVER['REQUEST_URI'] ?? '');
    $cleanUri   = strtok($requestUri, '?') ?: '';

    if (preg_match('#/robots\.txt$#i', $cleanUri)) {
      return true;
    }

    return isset($_GET['format']) && (string) $_GET['format'] === 'robots';
  }

  private function handleRobotsRequest(CMSApplication $app): void
  {
    header('Content-Type: text/plain');
    header('Cache-Control: public, max-age=3600');

    echo $this->generateRobotsContent();
    $app->close();
  }

  private function generateRobotsContent(): string
  {
    $domain    = $this->getCurrentDomain();
    $isStaging = $this->isStaging($domain);
    return $isStaging ? $this->getStagingRobots() : $this->getProductionRobots();
  }

  private function getCurrentDomain(): string
  {
    $scheme = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on') ? 'https' : 'http';
    $host   = $_SERVER['HTTP_HOST'] ?? ($_SERVER['SERVER_NAME'] ?? 'localhost');
    return $scheme . '://' . $host . '/';
  }

  private function isStaging(string $domain): bool
  {
    $stagingKeywords = ['staging', 'stage', 'dev', 'test', 'localhost'];
    foreach ($stagingKeywords as $keyword) {
      if (stripos($domain, $keyword) !== false) {
        return true;
      }
    }
    return false;
  }

  private function getStagingRobots(): string
  {
    return "# JoomlaBoost Robots.txt - STAGING ENVIRONMENT\n"
      . "# This site is not indexed by search engines\n\n"
      . "# Allow Google Search Console and related tools for testing\n"
      . "User-agent: Googlebot\n"
      . "User-agent: Google-InspectionTool\n"
      . "User-agent: Google-Site-Verification\n"
      . "User-agent: GoogleOther\n"
      . "Allow: /\n"
      . "Disallow: /administrator/\n"
      . "Disallow: /api/\n"
      . "Disallow: /cache/\n"
      . "Disallow: /tmp/\n\n"
      . "# Block all other crawlers\n"
      . "User-agent: *\n"
      . "Disallow: /\n\n"
      . "# This is a staging environment - not for public indexing\n\n"
      . "# Generated by JoomlaBoost Plugin\n"
      . "# Environment: Staging\n"
      . "# Generated: " . date('Y-m-d H:i:s T') . "\n";
  }

  private function getProductionRobots(): string
  {
    $baseUrl = $this->getCurrentDomain();

    return "# JoomlaBoost Robots.txt - PRODUCTION ENVIRONMENT\n\n"
      . "User-agent: *\n"
      . "Allow: /\n\n"
      . "# Disallow admin areas\n"
      . "Disallow: /administrator/\n"
      . "Disallow: /cache/\n"
      . "Disallow: /includes/\n"
      . "Disallow: /language/\n"
      . "Disallow: /libraries/\n"
      . "Disallow: /logs/\n"
      . "Disallow: /tmp/\n\n"
      . "# Allow specific files\n"
      . "Allow: /templates/\n"
      . "Allow: /media/\n"
      . "Allow: /images/\n\n"
      . "# Sitemap\n"
      . "Sitemap: {$baseUrl}sitemap.xml\n\n"
      . "# Generated by JoomlaBoost Plugin\n"
      . "# Environment: Production\n"
      . "# Generated: " . date('Y-m-d H:i:s T') . "\n";
  }

  private function logDebug(string $message): void
  {
    try {
      if ($this->params && $this->params->get('debug_mode', 0)) {
        Factory::getApplication()->enqueueMessage('[DEBUG] ' . $message, 'info');
      }
    } catch (\Throwable $e) {
      // ignore
    }
  }

  private function addSchemaMarkup(HtmlDocument $document): void
  {
    try {
      if ($this->schemaService === null) {
        $this->schemaService = new SchemaService($this->getApp(), $this->params);
      }

      if (!$this->params->get('enable_schema', 1)) {
        $this->logDebug('Schema: Disabled in plugin settings');
        return;
      }

      $schema = $this->schemaService->generateSchema();
      if (!empty($schema)) {
        $jsonLd  = '<script type="application/ld+json">' . "\n";
        $jsonLd .= json_encode($schema, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);
        $jsonLd .= "\n</script>";
        $document->addCustomTag($jsonLd);
        if ($this->params->get('debug_mode', 0)) {
          $this->logDebug('Schema.org JSON-LD generated: ' . count($schema) . ' schema(s)');
        }
      } else {
        $this->logDebug('Schema: No schema data generated');
      }
    } catch (\Throwable $e) {
      if ($this->params->get('debug_mode', 0)) {
        $this->logDebug('Schema.org generation failed: ' . $e->getMessage());
      }
    }
  }

  private function addGoogleVerificationTags(HtmlDocument $document): void
  {
    $gscMeta = $this->params->get('gsc_verification_meta', '');
    if (!empty($gscMeta)) {
      $document->setMetaData('google-site-verification', $gscMeta);
      $this->logDebug('Added Google Search Console verification meta tag');
    }

    $additionalHtml = $this->params->get('gsc_additional_html', '');
    if (!empty($additionalHtml)) {
      $document->addCustomTag($additionalHtml);
      $this->logDebug('Added additional Google verification HTML');
    }

    if ($this->params->get('enable_ga4', 0)) {
      $this->addGA4Tracking($document);
    }

    if ($this->params->get('enable_gtm', 0)) {
      $this->addGTMTracking($document);
    }
  }

  private function addGA4Tracking(HtmlDocument $document): void
  {
    $measurementId = $this->params->get('ga4_measurement_id', '');
    if (empty($measurementId)) {
      $this->logDebug('GA4: No measurement ID provided');
      return;
    }

    $ga4Script = "\n<!-- Google Analytics 4 -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id={$measurementId}\"></script>\n<script>\nwindow.dataLayer = window.dataLayer || [];\n\nfunction gtag() {\n  dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', '{$measurementId}');\n</script>";
    $document->addCustomTag($ga4Script);
    $this->logDebug('Added Google Analytics 4 tracking for: ' . $measurementId);
  }

  private function addGTMTracking(HtmlDocument $document): void
  {
    $containerId = $this->params->get('gtm_container_id', '');
    if (empty($containerId)) {
      $this->logDebug('GTM: No container ID provided');
      return;
    }

    $gtmHead = "\n<!-- Google Tag Manager -->\n<script>\n(function(w, d, s, l, i) {\n  w[l] = w[l] || [];\n  w[l].push({\n    'gtm.start': new Date().getTime(),\n    event: 'gtm.js'\n  });\n  var f = d.getElementsByTagName(s)[0],\n    j = d.createElement(s),\n    dl = l != 'dataLayer' ? '&l=' + l : '';\n  j.async = true;\n  j.src =\n    'https://www.googletagmanager.com/gtm.js?id=' + i + dl;\n  f.parentNode.insertBefore(j, f);\n})(window, document, 'script', 'dataLayer', '{$containerId}');\n</script>\n<!-- End Google Tag Manager -->";
    $document->addCustomTag($gtmHead);
    $this->logDebug('Added Google Tag Manager tracking for: ' . $containerId);
  }

  private function addMetaPixel(HtmlDocument $document): void
  {
    if (!$this->params->get('enable_meta_pixel', false)) {
      return;
    }

    if ($this->metaPixelService === null) {
      $this->metaPixelService = new MetaPixelService($this->params);
    }

    $this->metaPixelService->injectPixelCode($document);
    $this->metaPixelService->injectCustomEvents($document);
    $this->logDebug('Added Meta Pixel tracking');
  }
}
